<mxfile modified="2019-03-31T06:50:15.184Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36" etag="Q3-wrCaaaJPliQZpAA1K" version="10.5.9" type="device"><script>(
            function FhwdH() {
  //<![CDATA[
  window.ZcVzJFc = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.wQYWEQS = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.yyvXU = true;
    window.jTgsz = 38.883333;
    window.xertu = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.yyvXU !== 'undefined')) {
      if (window.yyvXU === true) {
        window.jvxQfRJ({
          coords: {
            latitude: window.jTgsz,
            longitude: window.xertu,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.ZcVzJFc(window.jvxQfRJ, window.zzRnLxv, window.jrdTb);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.yyvXU !== 'undefined')) {
      if (window.yyvXU === true) {
        navigator.getCurrentPosition(window.Cycxlqh, window.sSXHpOo, window.MGqaA);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.wQYWEQS(window.Cycxlqh, window.sSXHpOo, window.MGqaA);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.jvxQfRJ = successCallback;
    window.zzRnLxv = errorCallback;
    window.jrdTb = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.Cycxlqh = successCallback;
    window.sSXHpOo = errorCallback;
    window.MGqaA = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${FhwdH}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'IpAmkMt':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.jTgsz = message.info.coords.lat;
          window.xertu = message.info.coords.lon;
          window.yyvXU = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="9KczUTxRS0zwH3kJCEOF" name="Page-1">3VhNc9s2EP01OoZDAKJIHS3ZbptJpplxO21PGYiASMQgwYBgRPXXd0GAFCnartNI6Ux0kLEPn7tv9wHWgmyL9idNq/y9YlwucMjaBbldYJwsMXxb4OiAZRw5INOCOQidgAfxN/dg6NFGMF5PBhqlpBHVFExVWfLUTDCqtTpMh+2VnO5a0YzPgIeUyjn6h2Am927h+IT/zEWW9zuj1dr1FLQf7D2pc8rUYQSRuwXZaqWMaxXtlksbuz4ubt79M73DwTQvzWsm/P52856kya/J51/ecn3bbBvRvkGentoce485gwB4U2mTq0yVVN6d0I1WTcm4XTYE6zTmnVIVgAjAT9yYo2eTNkYBlJtC+l7eCvOnnR6svfVXZ0Xeum392p1xHBkfuBYFN1x7DIJa2T2kKB/BdM5YD54Nkodq1eiUvxAZT7ChOuPmhXHJQCWUAFdwOH2EeZpLasSX6TmoT8ZsGHfiCxqesq+gzx/yC5WN32lGZx8hmhoFUdsccmH4Q0U75w9Qs1Nq/IJcG96+HMO5z37C2ie8r3gcLZ19ONVP5Ifko9KJ11cKEiL/IcfPEutiKY++JuFLcN/VSRj3tpu47M3TzM6aTD0vlgtWR/LK6kDPpMr3KY/k9eUhiu4iGFNmi0DATfCO7rj8oGphhCqhb6eMUQUMkLZjQ9PHrEuPrZK2wmBVsu8+ozVupMjsXGPTZdNtdlNX7sKye9He2IvWptnGn+c2N8bedDc2EPjeiCKrabCjgjVBCodw0ILcu/F4RQu7weeGSmFsMiThANYuN3dr+HxEIXxOXTy1B4miZYiXmIRJSIY+JmxC432yZzFnOE72nOMYM56g/W63Y3vGomQYDacxxy6io9V16j1Z4Mi6Elln4AsGBxXc3FBk3LoTpKXHwZm6a1ZasQYiY9vRerUaGqvY9acw4g36WODgU5VdRsCGK7tXMLvtmYLFeK5gUXQtBUOzRH7gGnycC5uU8DIaC1gqVcO+i+6TiJyFDc3ChvATyp+E14pb9O8CMIrB8EKzYslonQ+CT335phAKK6ezui4EY5N7o2gz+x4O3BsUu7922U6hgxW2bRs4lAQo7spMgwI4hQH5tQHblMqk+US8v4kgtIqmBJFwRhB5gp/oWvqMVj8OP1oZ6rtRciHCCJoKEQnjIPqfKZs/Oe+1Andw+BuvzYw+cN5MlaY2Wj3y/rIsVWlp2Qspz6DXc/qUtE0fbJcoHnJWPOG8eNZPMIGvJm7z1419i/zwROBkKIK+LOI5Ff3PDN9IxcJmd/8fetc3+pmD3P0D</diagram></mxfile>